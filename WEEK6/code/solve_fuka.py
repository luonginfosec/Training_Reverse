from z3 import *
from Crypto.Util.number import long_to_bytes
def bytes_to_int(byte_array):
    return int.from_bytes(byte_array, byteorder='little')
solver = Solver()
input0 = Int('input0')
input1 = Int('input1')
input2 = Int('input2')
const0 = bytes([0xD9, 0xE0, 0x8B, 0x0B, 0xC5, 0x85, 0x8E, 0x62, 0xEE, 0x0B]) 
const1 = bytes([0x55, 0x9E, 0x28, 0x98, 0xC4, 0x05, 0xFE, 0xA3, 0x5F, 0x65])
const2 = bytes([0x01, 0xB1, 0x3D, 0xC7, 0x06, 0x7C, 0xC9, 0x82, 0x06, 0x14]) 
const3 = bytes([0x77, 0xC8, 0xE3, 0xE9, 0x8B, 0x0F, 0x2F, 0xD3, 0xAB, 0x10]) 
const4 = bytes([0xF1, 0xBD, 0x01, 0x43, 0x24, 0x1A, 0x57, 0xA0, 0xFC, 0x56])  
const5 = bytes([0x3D, 0x18, 0xB7, 0x93, 0x8A, 0xC7, 0x31, 0x9C, 0xE8, 0xAF]) 
const6 = bytes([0xD9, 0x54, 0x6C, 0x74, 0x31, 0x78, 0x70, 0xE6, 0x6D, 0x06]) 
const7 = bytes([0xFB, 0xDB, 0x27, 0x14, 0xC5, 0x48, 0xF7, 0x14, 0x7D, 0x5C]) 
const8 = bytes([0xEF, 0x95,  0x37, 0x7D, 0x7F, 0x73, 0xB9, 0x7F, 0x38, 0x87]) 
result0 = bytes([0x43, 0xE6, 0x0E, 0x73, 0xC4, 0xFA, 0x26, 0x37, 0xD7, 0xF8, 0xC3, 0x2C, 0xC8, 0x57, 0x8A, 0x8F, 0xAA, 0x01, 0x86, 0x0D])
result1 = bytes([0xF7, 0x61, 0x51, 0xE7, 0x0A, 0x93, 0x04, 0xB8, 0xCD, 0x0C, 0x78, 0x1C, 0x0E, 0x20, 0x3F, 0xD2, 0x0A, 0x65, 0x05, 0x65])
result2 = bytes([0x83, 0x30, 0xE8, 0xFE, 0x14, 0xCD, 0x10, 0x7E, 0x43, 0x36, 0x86, 0xC3, 0xCA, 0xE1, 0x1A, 0x98, 0xE8, 0x7D, 0xB1, 0x4D])
const0_int = bytes_to_int(const0)
const1_int = bytes_to_int(const1)
const2_int = bytes_to_int(const2)
const3_int = bytes_to_int(const3)
const4_int = bytes_to_int(const4)
const5_int = bytes_to_int(const5)
const6_int = bytes_to_int(const6)
const7_int = bytes_to_int(const7)
const8_int = bytes_to_int(const8)

result0_int = bytes_to_int(result0)
result1_int = bytes_to_int(result1)
result2_int = bytes_to_int(result2)

# Thiết lập các phương trình
equation1 = input0 * const0_int + input1 * const1_int - input2 * const2_int == result0_int
equation2 = input0 * const3_int + input1 * const4_int + input2 * const5_int == result1_int
equation3 = input0 * const6_int - input1 * const7_int - input2 * const8_int == -result2_int

# Thêm các phương trình vào solver
solver.add(equation1)
solver.add(equation2)
solver.add(equation3)

# Kiểm tra xem có nghiệm hay không
if solver.check() == sat:
    model = solver.model()
    print(f"{long_to_bytes(model[input0].as_long()).decode()}",end="")
    print(f"{long_to_bytes(model[input1].as_long()).decode()}",end="")
    print(f"{long_to_bytes(model[input2].as_long()).decode()}",end="")
else:
    print("NO NO")
